1. Single Responsibility Principle (SRP) - Nguyên lý trách nhiệm duy nhất
1.1. Định nghĩa
"A class should have only one reason to change." (Một class chỉ nên có một lý do để thay đổi).
SRP nhấn mạnh rằng mỗi class trong hệ thống chỉ nên chịu trách nhiệm về một nhiệm vụ hoặc một khía cạnh duy nhất của logic nghiệp vụ.


1.2. Ý nghĩa
Cải thiện tính dễ đọc của mã nguồn:
Một class chỉ xử lý một nhiệm vụ sẽ dễ hiểu hơn và ít phức tạp.
Giảm sự phụ thuộc lẫn nhau:
Khi một class chịu trách nhiệm quá nhiều, việc sửa đổi một nhiệm vụ có thể ảnh hưởng đến các nhiệm vụ khác.
Dễ dàng bảo trì và mở rộng:
Mỗi class chỉ tập trung vào một nhiệm vụ → khi nhiệm vụ thay đổi, chỉ cần sửa đúng class liên quan.
Tăng khả năng tái sử dụng:
Các class nhỏ và độc lập sẽ dễ dàng được sử dụng lại trong các module hoặc hệ thống khác.


1.3. Vấn đề nếu vi phạm SRP
Khó đọc và khó hiểu:
Một class đảm nhận nhiều trách nhiệm sẽ có logic phức tạp, khó đọc và gây nhầm lẫn.
Khó bảo trì:
Khi thay đổi một trách nhiệm, bạn phải sửa đổi class, có nguy cơ làm hỏng logic liên quan đến các trách nhiệm khác.
Khó mở rộng:
Khi cần thêm một tính năng mới, bạn sẽ phải can thiệp vào một class lớn, khiến nó ngày càng phức tạp.
Ảnh hưởng domino:
Một thay đổi nhỏ có thể gây lỗi không mong muốn ở các phần khác của hệ thống.
Ví dụ:
Class Notification vừa chịu trách nhiệm gửi thông báo vừa ghi log.
Khi bạn sửa đổi logic ghi log, có thể vô tình làm hỏng logic gửi thông báo.


1.4. Làm thế nào để tuân thủ SRP?
Tách trách nhiệm:
Nếu một class đang đảm nhận nhiều trách nhiệm, hãy tách từng trách nhiệm thành các class riêng biệt.
Sử dụng nguyên tắc phân chia module:
Mỗi module hoặc class xử lý một nhiệm vụ cụ thể.
Dựa vào logic nghiệp vụ:
Xác định rõ ràng nhiệm vụ mà class chịu trách nhiệm và không để nó "lan man" sang các nhiệm vụ khác.
Ví dụ:
Class NotificationSender chỉ chịu trách nhiệm gửi thông báo.
Class NotificationLogger chỉ chịu trách nhiệm ghi log.