1. Lý thuyết chi tiết về Dependency Inversion Principle (DIP)
1.1. Định nghĩa
Dependency Inversion Principle (DIP):

"High-level modules should not depend on low-level modules. Both should depend on abstractions."
"Abstractions should not depend on details. Details should depend on abstractions."
1.2. Mục đích
Giảm sự phụ thuộc giữa các module cấp cao và module cấp thấp.
Đảm bảo rằng các module dễ thay thế và mở rộng mà không ảnh hưởng đến phần còn lại của hệ thống.
Thúc đẩy sử dụng abstraction (interface hoặc abstract class) để giao tiếp giữa các module.
1.3. Vấn đề nếu vi phạm DIP
Phụ thuộc trực tiếp vào module cấp thấp:
Module cấp cao gọi trực tiếp class cấp thấp.
Khi logic trong class cấp thấp thay đổi, module cấp cao cũng phải thay đổi.
Khó mở rộng:
Thêm một module mới đòi hỏi phải thay đổi mã nguồn của module cấp cao.
Khó kiểm thử:
Không thể dễ dàng thay thế hoặc giả lập (mock) các class cấp thấp.
Ví dụ:
Class `NotificationService` trực tiếp gọi class `EmailSender`. Khi thêm phương thức gửi SMS, bạn phải sửa `NotificationService`.
1.4. Làm thế nào để tuân thủ DIP?
Sử dụng abstraction:
Module cấp cao và cấp thấp đều phụ thuộc vào một interface hoặc abstract class.
Đảo ngược phụ thuộc:
Module cấp cao không biết về các chi tiết triển khai của module cấp thấp.
Inject phụ thuộc:
Sử dụng Dependency Injection (DI) để cung cấp module cấp thấp cho module cấp cao.
1.5. Ví dụ minh họa lý thuyết
Vi phạm DIP:
class NotificationService {
    private EmailSender emailSender = new EmailSender();

    public void sendNotification(String message) {
        emailSender.sendEmail(message);
    }
}
Tuân thủ DIP:
interface MessageSender {
    void sendMessage(String message);
}

class EmailSender implements MessageSender {
    public void sendMessage(String message) {
        System.out.println("Email sent: " + message);
    }
}

class NotificationService {
    private MessageSender messageSender;

    public NotificationService(MessageSender messageSender) {
        this.messageSender = messageSender;
    }

    public void sendNotification(String message) {
        messageSender.sendMessage(message);
    }
}
2. Triển khai ví dụ minh họa DIP
Tình huống thực tế
Tình huống: Một hệ thống gửi thông báo hỗ trợ nhiều kênh khác nhau như Email và SMS.
Vi phạm DIP: Class NotificationService trực tiếp gọi class EmailSender hoặc SmsSender.
Giải pháp: Sử dụng interface MessageSender, các module cấp thấp như EmailSender và SmsSender implement interface này.